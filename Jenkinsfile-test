node {
    // Parameters
    def stagesToRun = params.STAGES_TO_RUN.tokenize(',').collect { it.trim() }
    def goToolName = params.GO_TOOL_NAME
    def scannerToolName = params.SCANNER_TOOL_NAME
    def dependencyToolName = params.DEPENDENCY_TOOL_NAME
    def gitBranch = params.GIT_BRANCH
    def gitCredentialsId = params.GIT_CREDENTIALS_ID
    def gitUrl = params.GIT_URL
    def sonarQubeEnvName = params.SONARQUBE_ENV_NAME

    // Tools
    def goTool = tool name: goToolName, type: 'Go'
    def scannerHome = tool name: scannerToolName
    def dependencyCheckHome = tool name: dependencyToolName

    // Environment Variables
    env.SCANNER_HOME = scannerHome
    env.DEPENDENCY_CHECK_HOME = dependencyCheckHome

    try {
        stage('Checkout') {
            if (stagesToRun.contains('Checkout')) {
                echo "Running Checkout stage"
                checkout scm: [$class: 'GitSCM', branches: [[name: gitBranch]], userRemoteConfigs: [[credentialsId: gitCredentialsId, url: gitUrl]]]
            }
        }

        stage('Build') {
            if (stagesToRun.contains('Build')) {
                echo "Running Build stage"
                sh """
                export PATH=\$PATH:${goTool}/bin
                go mod tidy
                go mod download
                go build -o employee-api .
                """
            }
        }

        stage('Unit Test') {
            if (stagesToRun.contains('Unit Test')) {
                echo "Running Unit Test stage"
                sh 'go test ./... -v | tee unit-test-results.xml'
            }
        }

        stage('SonarQube Analysis') {
            if (stagesToRun.contains('SonarQube Analysis')) {
                echo "Running SonarQube Analysis stage"
                withSonarQubeEnv(sonarQubeEnvName) {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Dependency Scan') {
            if (stagesToRun.contains('Dependency Scan')) {
                echo "Running Dependency Scan stage"
                dependencyCheck additionalArguments: '--scan . --format ALL', odcInstallation: dependencyToolName
            }
        }

        stage('Archive Report') {
            if (stagesToRun.contains('Archive Report')) {
                echo "Running Archive Report stage"
                archiveArtifacts artifacts: 'unit-test-results.xml', allowEmptyArchive: true
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'dependency-check-report.html',
                    reportName: 'Dependency Check Report',
                    reportTitles: ''
                ])
            }
        }

    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        echo 'Build failed!'
        throw e
    } finally {
        if (currentBuild.result == 'SUCCESS') {
            echo 'Build successful!'
        } else {
            echo 'Build failed!'
        }
    }
}
